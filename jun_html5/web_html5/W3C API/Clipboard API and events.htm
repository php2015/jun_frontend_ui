<!DOCTYPE html PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN" "http://www.w3.org/TR/html4/loose.dtd">
<!-- saved from url=(0053)http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/ -->
<html dir="ltr" lang="en"><head><meta http-equiv="Content-Type" content="text/html; charset=UTF-8">
	<title> Clipboard API and events </title>
	
	
	
		<style type="text/css">.tmp-issue-table td{border: 1px solid red}</style>
	<link href="./Clipboard API and events_files/geek.css" rel="stylesheet" type="text/css">
	<link href="./Clipboard API and events_files/spec.css" rel="stylesheet" type="text/css">
<style type="text/css">
/*****************************************************************
 * ReSpec CSS
 * Robin Berjon (robin at berjon dot com)
 * v0.05 - 2009-07-31
 *****************************************************************/


/* --- INLINES --- */
em.rfc2119 { 
    text-transform:     lowercase;
    font-variant:       small-caps;
    font-style:         normal;
    color:              #900;
}

h1 acronym, h2 acronym, h3 acronym, h4 acronym, h5 acronym, h6 acronym, a acronym,
h1 abbr, h2 abbr, h3 abbr, h4 abbr, h5 abbr, h6 abbr, a abbr {
    border: none;
}

dfn {
    font-weight:    bold;
}

a.internalDFN {
    color:  inherit;
    border-bottom:  1px solid #99c;
    text-decoration:    none;
}

a.externalDFN {
    color:  inherit;
    border-bottom:  1px dotted #ccc;
    text-decoration:    none;
}

a.bibref {
    text-decoration:    none;
}

code {
    color:  #ff4500;
}


/* --- WEB IDL --- */
pre.idl {
    border-top: 1px solid #90b8de;
    border-bottom: 1px solid #90b8de;
    padding:    1em;
    line-height:    120%;
}

pre.idl::before {
    content:    "WebIDL";
    display:    block;
    width:      150px;
    background: #90b8de;
    color:  #fff;
    font-family:    initial;
    padding:    3px;
    font-weight:    bold;
    margin: -1em 0 1em -1em;
}

.idlType {
    color:  #ff4500;
    font-weight:    bold;
    text-decoration:    none;
}

/*.idlModule*/
/*.idlModuleID*/
/*.idlInterface*/
.idlInterfaceID, .idlDictionaryID {
    font-weight:    bold;
    color:  #005a9c;
}

.idlSuperclass {
    font-style: italic;
    color:  #005a9c;
}

/*.idlAttribute*/
.idlAttrType, .idlFieldType, .idlMemberType {
    color:  #005a9c;
}
.idlAttrName, .idlFieldName, .idlMemberName {
    color:  #ff4500;
}
.idlAttrName a, .idlFieldName a, .idlMemberName a {
    color:  #ff4500;
    border-bottom:  1px dotted #ff4500;
    text-decoration: none;
}

/*.idlMethod*/
.idlMethType {
    color:  #005a9c;
}
.idlMethName {
    color:  #ff4500;
}
.idlMethName a {
    color:  #ff4500;
    border-bottom:  1px dotted #ff4500;
    text-decoration: none;
}

/*.idlParam*/
.idlParamType {
    color:  #005a9c;
}
.idlParamName {
    font-style: italic;
}

.extAttr {
    color:  #666;
}

/*.idlConst*/
.idlConstType {
    color:  #005a9c;
}
.idlConstName {
    color:  #ff4500;
}
.idlConstName a {
    color:  #ff4500;
    border-bottom:  1px dotted #ff4500;
    text-decoration: none;
}

/*.idlException*/
.idlExceptionID {
    font-weight:    bold;
    color:  #c00;
}

.idlTypedefID, .idlTypedefType {
    color:  #005a9c;
}

.idlRaises, .idlRaises a.idlType, .idlRaises a.idlType code, .excName a, .excName a code {
    color:  #c00;
    font-weight:    normal;
}

.excName a {
    font-family:    monospace;
}

.idlRaises a.idlType, .excName a.idlType {
    border-bottom:  1px dotted #c00;
}

.excGetSetTrue, .excGetSetFalse, .prmNullTrue, .prmNullFalse, .prmOptTrue, .prmOptFalse {
    width:  45px;
    text-align: center;
}
.excGetSetTrue, .prmNullTrue, .prmOptTrue { color:  #0c0; }
.excGetSetFalse, .prmNullFalse, .prmOptFalse { color:  #c00; }

.idlImplements a {
    font-weight:    bold;
}

dl.attributes, dl.methods, dl.constants, dl.fields, dl.dictionary-members {
    margin-left:    2em;
}

.attributes dt, .methods dt, .constants dt, .fields dt, .dictionary-members dt {
    font-weight:    normal;
}

.attributes dt code, .methods dt code, .constants dt code, .fields dt code, .dictionary-members dt code {
    font-weight:    bold;
    color:  #000;
    font-family:    monospace;
}

.attributes dt code, .fields dt code, .dictionary-members dt code {
    background:  #ffffd2;
}

.attributes dt .idlAttrType code, .fields dt .idlFieldType code, .dictionary-members dt .idlMemberType code {
    color:  #005a9c;
    background:  transparent;
    font-family:    inherit;
    font-weight:    normal;
    font-style: italic;
}

.methods dt code {
    background:  #d9e6f8;
}

.constants dt code {
    background:  #ddffd2;
}

.attributes dd, .methods dd, .constants dd, .fields dd, .dictionary-members dd {
    margin-bottom:  1em;
}

table.parameters, table.exceptions {
    border-spacing: 0;
    border-collapse:    collapse;
    margin: 0.5em 0;
    width:  100%;
}
table.parameters { border-bottom:  1px solid #90b8de; }
table.exceptions { border-bottom:  1px solid #deb890; }

.parameters th, .exceptions th {
    color:  #fff;
    padding:    3px 5px;
    text-align: left;
    font-family:    initial;
    font-weight:    normal;
    text-shadow:    #666 1px 1px 0;
}
.parameters th { background: #90b8de; }
.exceptions th { background: #deb890; }

.parameters td, .exceptions td {
    padding:    3px 10px;
    border-top: 1px solid #ddd;
    vertical-align: top;
}

.parameters tr:first-child td, .exceptions tr:first-child td {
    border-top: none;
}

.parameters td.prmName, .exceptions td.excName, .exceptions td.excCodeName {
    width:  100px;
}

.parameters td.prmType {
    width:  120px;
}

table.exceptions table {
    border-spacing: 0;
    border-collapse:    collapse;
    width:  100%;
}

/* --- TOC --- */
.toc a {
    text-decoration:    none;
}

a .secno {
    color:  #000;
}

/* --- TABLE --- */
table.simple {
    border-spacing: 0;
    border-collapse:    collapse;
    border-bottom:  3px solid #005a9c;
}

.simple th {
    background: #005a9c;
    color:  #fff;
    padding:    3px 5px;
    text-align: left;
}

.simple th[scope="row"] {
    background: inherit;
    color:  inherit;
    border-top: 1px solid #ddd;
}

.simple td {
    padding:    3px 10px;
    border-top: 1px solid #ddd;
}

.simple tr:nth-child(even) {
    background: #f0f6ff;
}

/* --- DL --- */
.section dd > p:first-child {
    margin-top: 0;
}

.section dd > p:last-child {
    margin-bottom: 0;
}

.section dd {
    margin-bottom:  1em;
}

.section dl.attrs dd, .section dl.eldef dd {
    margin-bottom:  0;
}

/* --- EXAMPLES --- */
pre.example {
    border-top: 1px solid #ff4500;
    border-bottom: 1px solid #ff4500;
    padding:    1em;
    margin-top: 1em;
}

pre.example::before {
    content:    "Example";
    display:    block;
    width:      150px;
    background: #ff4500;
    color:  #fff;
    font-family:    initial;
    padding:    3px;
    font-weight:    bold;
    margin: -1em 0 1em -1em;
}

/* --- EDITORIAL NOTES --- */
.issue {
    padding:    1em;
    margin: 1em 0em 0em;
    border: 1px solid #f00;
    background: #ffc;
}

.issue::before {
    content:    "Issue";
    display:    block;
    width:  150px;
    margin: -1.5em 0 0.5em 0;
    font-weight:    bold;
    border: 1px solid #f00;
    background: #fff;
    padding:    3px 1em;
}

.note {
    margin: 1em 0em 0em;
    padding:    1em;
    border: 2px solid #cff6d9;
    background: #e2fff0;
}

.note::before {
    content:    "Note";
    display:    block;
    width:  150px;
    margin: -1.5em 0 0.5em 0;
    font-weight:    bold;
    border: 1px solid #cff6d9;
    background: #fff;
    padding:    3px 1em;
}

/* --- Best Practices --- */
div.practice {
    border: solid #bebebe 1px;
    margin: 2em 1em 1em 2em;
}

span.practicelab {
    margin: 1.5em 0.5em 1em 1em;
    font-weight: bold;
    font-style: italic;
}

span.practicelab   { background: #dfffff; }

span.practicelab {
    position: relative;
    padding: 0 0.5em;
    top: -1.5em;
}

p.practicedesc {
    margin: 1.5em 0.5em 1em 1em;
}

@media screen {
    p.practicedesc {
        position: relative;
        top: -2em;
        padding: 0;
        margin: 1.5em 0.5em -1em 1em;
    }
}

/* --- SYNTAX HIGHLIGHTING --- */
pre.sh_sourceCode {
  background-color: white;
  color: black;
  font-style: normal;
  font-weight: normal;
}

pre.sh_sourceCode .sh_keyword { color: #005a9c; font-weight: bold; }           /* language keywords */
pre.sh_sourceCode .sh_type { color: #666; }                            /* basic types */
pre.sh_sourceCode .sh_usertype { color: teal; }                             /* user defined types */
pre.sh_sourceCode .sh_string { color: red; font-family: monospace; }        /* strings and chars */
pre.sh_sourceCode .sh_regexp { color: orange; font-family: monospace; }     /* regular expressions */
pre.sh_sourceCode .sh_specialchar { color: 	#ffc0cb; font-family: monospace; }  /* e.g., \n, \t, \\ */
pre.sh_sourceCode .sh_comment { color: #A52A2A; font-style: italic; }         /* comments */
pre.sh_sourceCode .sh_number { color: purple; }                             /* literal numbers */
pre.sh_sourceCode .sh_preproc { color: #00008B; font-weight: bold; }       /* e.g., #include, import */
pre.sh_sourceCode .sh_symbol { color: blue; }                            /* e.g., *, + */
pre.sh_sourceCode .sh_function { color: black; font-weight: bold; }         /* function calls and declarations */
pre.sh_sourceCode .sh_cbracket { color: red; }                              /* block brackets (e.g., {, }) */
pre.sh_sourceCode .sh_todo { font-weight: bold; background-color: #00FFFF; }   /* TODO and FIXME */

/* Predefined variables and functions (for instance glsl) */
pre.sh_sourceCode .sh_predef_var { color: #00008B; }
pre.sh_sourceCode .sh_predef_func { color: #00008B; font-weight: bold; }

/* for OOP */
pre.sh_sourceCode .sh_classname { color: teal; }

/* line numbers (not yet implemented) */
pre.sh_sourceCode .sh_linenum { display: none; }

/* Internet related */
pre.sh_sourceCode .sh_url { color: blue; text-decoration: underline; font-family: monospace; }

/* for ChangeLog and Log files */
pre.sh_sourceCode .sh_date { color: blue; font-weight: bold; }
pre.sh_sourceCode .sh_time, pre.sh_sourceCode .sh_file { color: #00008B; font-weight: bold; }
pre.sh_sourceCode .sh_ip, pre.sh_sourceCode .sh_name { color: #006400; }

/* for Prolog, Perl... */
pre.sh_sourceCode .sh_variable { color: #006400; }

/* for LaTeX */
pre.sh_sourceCode .sh_italics { color: #006400; font-style: italic; }
pre.sh_sourceCode .sh_bold { color: #006400; font-weight: bold; }
pre.sh_sourceCode .sh_underline { color: #006400; text-decoration: underline; }
pre.sh_sourceCode .sh_fixed { color: green; font-family: monospace; }
pre.sh_sourceCode .sh_argument { color: #006400; }
pre.sh_sourceCode .sh_optionalargument { color: purple; }
pre.sh_sourceCode .sh_math { color: orange; }
pre.sh_sourceCode .sh_bibtex { color: blue; }

/* for diffs */
pre.sh_sourceCode .sh_oldfile { color: orange; }
pre.sh_sourceCode .sh_newfile { color: #006400; }
pre.sh_sourceCode .sh_difflines { color: blue; }

/* for css */
pre.sh_sourceCode .sh_selector { color: purple; }
pre.sh_sourceCode .sh_property { color: blue; }
pre.sh_sourceCode .sh_value { color: #006400; font-style: italic; }

/* other */
pre.sh_sourceCode .sh_section { color: black; font-weight: bold; }
pre.sh_sourceCode .sh_paren { color: red; }
pre.sh_sourceCode .sh_attribute { color: #006400; }

</style>
  <link rel="stylesheet" href="./Clipboard API and events_files/W3C-WD.css" type="text/css">
</head>
<!--
	The source of this spec contains a number of tests for extraction. Here are some requirements for the test framework:
		each SCRIPT in this file will be turned into one test case per listed event in Events: comment and per Targets: comment
		extra inline HTML code for test case can be given with Test HTML: comment (defaults to single input)
		defines test method that returns true for pass, false for failure and string for other unexpected statuses.
		framework must set up a listener for the relevant event(s) that calls the test() method with the event object as argument, and check return value
		framework will then focus suitable element and trigger relevant event. For paste, data will be given in 'paste data:' comment.
		(If there is no "paste data:" instruction, the framework shall clear the clipboard before each test is run)
		for cut/copy, framework will select element contents before triggering command
		if test function returns undefined, the test is async and will call a result() method the framework must define with pass/fail
		An "External pass condition - clipboard data:" comment indicates that the pass/fail result of the test can not be checked from JavaScript, and the framework must check if the expected data is on the clipboard to know if the test passed or failed
		If the test code defines triggerTestManually() the tester or framework needs to do specific actions before the test runs.
		If the test code defines onTestSetupReady() it must be called after event listeners were defined to trigger the actual test
-->

<body lang="en" style="display: inherit"><div class="head"><p><a href="http://www.w3.org/"><img alt="W3C" height="48" src="./Clipboard API and events_files/w3c_home" width="72"></a></p><h1 class="title" id="title">Clipboard API and events</h1><h2 id="w3c-editor-s-draft-18-february-2012"><acronym title="World Wide Web Consortium">W3C</acronym> Working Draft 23 February 2012</h2><dl><dt>This version:</dt><dd><a href="./Clipboard API and events_files/Clipboard API and events.htm">http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/</a></dd><dt>Latest version:</dt><dd><a href="http://www.w3.org/TR/clipboard-apis/">http://www.w3.org/TR/clipboard-apis/</a></dd><dt>Latest editor's draft:</dt><dd><a href="http://dev.w3.org/2006/webapi/clipops/clipops.html">http://dev.w3.org/2006/webapi/clipops/clipops.html</a></dd><dt>Previous version:</dt><dd><a href="http://www.w3.org/TR/2011/WD-clipboard-apis-20110412/">http://www.w3.org/TR/2011/WD-clipboard-apis-20110412/</a></dd><dt>Editor:</dt><dd><a href="mailto:hallvord@opera.com">Hallvord R. M. Steen</a>, <a href="http://www.opera.com/">Opera Software</a></dd>
</dl><p class="copyright"><a href="http://www.w3.org/Consortium/Legal/ipr-notice#Copyright">Copyright</a> © 2012 <a href="http://www.w3.org/"><acronym title="World Wide Web Consortium">W3C</acronym></a><sup>®</sup> (<a href="http://www.csail.mit.edu/"><acronym title="Massachusetts Institute of Technology">MIT</acronym></a>, <a href="http://www.ercim.eu/"><acronym title="European Research Consortium for Informatics and Mathematics">ERCIM</acronym></a>, <a href="http://www.keio.ac.jp/">Keio</a>), All Rights Reserved. <acronym title="World Wide Web Consortium">W3C</acronym> <a href="http://www.w3.org/Consortium/Legal/ipr-notice#Legal_Disclaimer">liability</a>, <a href="http://www.w3.org/Consortium/Legal/ipr-notice#W3C_Trademarks">trademark</a> and <a href="http://www.w3.org/Consortium/Legal/copyright-documents">document use</a> rules apply.</p><hr></div>
<div class="introductory section" id="abstract"><h2>Abstract</h2>
	<p>This document describes APIs for clipboard operations such as copy, cut and
	paste in web applications.</p>
</div><div class="introductory section" id="sotd"><h2>Status of This Document</h2><p><em>This section describes the status of this document at the time of its publication. Other documents may supersede this document. A list of current <acronym title="World Wide Web Consortium">W3C</acronym> publications and the latest revision of this technical report can be found in the <a href="http://www.w3.org/TR/"><acronym title="World Wide Web Consortium">W3C</acronym> technical reports index</a> at http://www.w3.org/TR/.</em></p>
<p>This document was published by the <a href="http://www.w3.org/2008/webapps/">Web Applications Working Group</a> as a Working Draft. If you wish to make comments regarding this document, please send them to <a href="mailto:public-webapps@w3.org">public-webapps@w3.org</a> (<a href="mailto:public-webapps-request@w3.org?subject=subscribe">subscribe</a>, <a href="http://lists.w3.org/Archives/Public/public-webapps/">archives</a>). All feedback is welcome. A <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/diff.html">diff</a> with the previous version is available.</p><p>Publication as a Working Draft does not imply endorsement by the <acronym title="World Wide Web Consortium">W3C</acronym> Membership. This is a draft document and may be updated, replaced or obsoleted by other documents at any time. It is inappropriate to cite this document as other than work in progress.

</p><p> This document was produced by a group operating under the <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/">5 February 2004 W3C Patent Policy</a>. W3C maintains a <a rel="disclosure" href="http://www.w3.org/2004/01/pp-impl/42538/status#disclosures">public list of any patent disclosures</a> made in connection with the deliverables of the group; that page also includes instructions for disclosing a patent. An individual who has actual knowledge of a patent which the individual believes contains <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#def-essential">Essential Claim(s)</a> must disclose the information in accordance with <a href="http://www.w3.org/Consortium/Patent-Policy-20040205/#sec-Disclosure">section 6 of the W3C Patent Policy</a>. </p>

</div><div class="section" id="toc"><h2 class="introductory">Table of Contents</h2><ul class="toc"><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#conformance"><span class="secno">1. </span>Conformance</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#introduction"><span class="secno">2. </span>Introduction</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#use-cases"><span class="secno">3. </span>Use Cases</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#events"><span class="secno">4. </span>Events</a><ul class="toc"><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#event-types-and-details"><span class="secno">4.1 </span>Event types and details</a><ul class="toc"><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#copy-event"><span class="secno">4.1.1 </span>copy event</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#cut-event"><span class="secno">4.1.2 </span>cut event</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#paste-event"><span class="secno">4.1.3 </span>paste event</a></li></ul></li></ul></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#processing-model"><span class="secno">5. </span>Processing model</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#clipboard-event-interfaces"><span class="secno">6. </span><span class="formerLink">Clipboard event</span> interfaces</a><ul class="toc"><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#dictionary-clipboardeventinit-members"><span class="secno">6.1 </span>Dictionary <span class="idlType formerLink idlType"><code>ClipboardEventInit</code></span> Members</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#attributes"><span class="secno">6.2 </span>Attributes</a></li></ul></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#integration-with-other-scripts-and-events"><span class="secno">7. </span>Integration with other scripts and events</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#pasting-html-and-multi-part-data"><span class="secno">8. </span>Pasting HTML and multi-part data</a><ul class="toc"><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#security-risks"><span class="secno">8.1 </span>Security risks</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#general-security-policies"><span class="secno">8.2 </span>General security policies</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#cross-origin-html-paste-sanitization-algorithm"><span class="secno">8.3 </span>Cross-origin HTML paste sanitization algorithm</a></li></ul></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#other-security-and-privacy-considerations"><span class="secno">9. </span>Other security and privacy considerations</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#mandatory-data-types-1"><span class="secno">10. </span>Mandatory data types</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#references"><span class="secno">A. </span>References</a><ul class="toc"><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#normative-references"><span class="secno">A.1 </span>Normative references</a></li><li class="tocline"><a class="tocxref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#informative-references"><span class="secno">A.2 </span>Informative references</a></li></ul></li></ul></div>



<div class="section" id="conformance"><!--OddPage--><h2><span class="secno">1. </span>Conformance</h2><p>As well as sections marked as non-normative, all authoring guidelines, diagrams, examples, and notes in this specification are non-normative. Everything else in this specification is normative.</p>
<p>The key words <em class="rfc2119" title="must">must</em>, <em class="rfc2119" title="must not">must not</em>, <em class="rfc2119" title="required">required</em>, <em class="rfc2119" title="should">should</em>, <em class="rfc2119" title="should not">should not</em>, <em class="rfc2119" title="recommended">recommended</em>, <em class="rfc2119" title="may">may</em>, and <em class="rfc2119" title="optional">optional</em> in this specification are to be interpreted as described in [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-RFC2119" rel="biblioentry">RFC2119</a></cite>].</p>
</div>

<div class="section" id="introduction">
<!--OddPage--><h2 id="secintro"><span class="secno">2. </span>Introduction</h2>

<p>This section is informative</p>

<p>This specification defines the common clipboard operations of cutting,
copying and pasting, in such a way that they are exposed to Web Applications
and can be adapted to provide advanced functionalities. Its goal is to
provide for compatibility where possible with existing implementations.</p>
</div>

<div class="section" id="use-cases">
<!--OddPage--><h2 id="Cases"><span class="secno">3. </span>Use Cases</h2>

<p>This section is informative</p>

<p>There are many use cases for being able to change the default clipboard
operations (cut/copy/paste). We have collected
a few samples to demonstrate possible uses, although these may not all be
supported by this specification.</p>

<h3 id="Rich">Rich content editing</h3>

<p>When copying text which contains hyperlinks or other structure,
it is often useful to be able to reformat the content to preserve important
information.</p>

<h3 id="graphics-with-built-in-semantics">Graphics with built-in semantics</h3>
<p>In order to make web applications which allow the manipulation of rich
text, or of graphic content such as SVG, it is useful to provide a mechanism
that allows for copying more than just the rendered content.</p>

<h3 id="Mathematic">Mathematical information</h3>

<p>With content such as mathematics, simply copying rendered text and pasting
it into another application generally leads to most of the semantics being
lost. MathML often needs to be transformed to be copied as plain text, for example to make sure "to the power of" is shown with the caret  "^" sign in a formula plain-text input. The XML source
could also be placed in the clipboard with the appropriate transformation occurring at paste time.</p>

</div>

<div class="section" id="events">


<!--OddPage--><h2><span class="secno">4. </span>Events</h2>
<div class="section" id="event-types-and-details">
<h3><span class="secno">4.1 </span>Event types and details</h3>
<p>This section is informative. Implementation details are given in the processing model section.</p>
<div class="section" id="copy-event">
<h4><span class="secno">4.1.1 </span>copy event</h4>
<p>When the user initiates a copy operation, the implementation <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#fire-a-clipboard-event">fires a clipboard event</a> named <em>copy</em>. Its default action is to place the selected data on the clipboard. </p>







<p>The current selection is not affected.</p>


<p>If there is no selection, the clipboard is not modified except if the default action is prevented and the script has added entries in the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>, for example by calling the <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransfer-setdata">setData()</a></code> method.</p>


</div>

<div class="section" id="cut-event">

<h4><span class="secno">4.1.2 </span>cut event</h4>
<p>When the user initiates a cut operation, the implementation <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#fire-a-clipboard-event">fires a clipboard event</a> named <em>cut</em>. In an editable context, its default action is to place the selected data on the clipboard and remove the selection from the document.</p>
<!-- Tests are above, under copy. One additional test for preventing default action here: -->

<p>In a non-editable context, or if there is no selection, the cut event's default action is to do nothing. The implementation fires the event regardless. If the default action is to do nothing, the clipboard is not modified except if the default action is prevented and the script has added entries in the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>.</p>




<p>The cut event fires before the selected data is removed.


 When the cut operation is completed, the selection is collapsed.</p>

<p>If content in the document is selected, the default action of a copy event is to place the selection on the clipboard. If content is selected and the selection is in an editable context, the default action of a cut event is to place the selection on the clipboard and remove it from the document. Hence, the script calling setData() also needs to cancel the default action of the event with event.preventDefault(). Otherwise, the data the script intends to place on the clipboard will be overwritten by the default action.</p>





</div>
<div class="section" id="paste-event">


<h4><span class="secno">4.1.3 </span>paste event</h4>
<p>When the user initiates a paste operation, the implementation <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#fire-a-clipboard-event">fires a clipboard event</a> named <em>paste</em>. The event fires before any clipboard data is inserted.</p>






<p>If the cursor is in an editable element, the default action is to insert clipboard data in the most suitable format supported for the given context.</p>

<p> The paste event has no default action in a non-editable context, but the event fires regardless.</p>


<p>When pasting, the <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#drag-data-store-mode">drag data store mode</a></code> flag is <em>read-only</em>, hence calling <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransfer-setdata">setData()</a></code> from a <b>paste</b> event handler will not modify the data that is inserted, and not modify the data on the clipboard.</p>








</div>

</div>
</div>


<div class="section" id="processing-model">
<!--OddPage--><h2><span class="secno">5. </span>Processing model</h2>
<p>These are the general steps to follow when <dfn id="fire-a-clipboard-event">firing clipboard events</dfn>.</p>
<ol>
	<li>Let the event object's clipboardData property be a <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-datatransfer-interface">DataTransfer</a></code> object [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-HTML5-DND" rel="biblioentry">HTML5-DND</a></cite>]</li>

	<li>Let <var>clear-was-called</var> be <var>false</var></li>
	<li>Let <var>types-to-clear</var> be an empty list</li>
	<li>Let <var>clipboard-entry</var> be the sequence number of the current clipboard content, or null if the OS clipboard does not support sequence numbers</li>
	<li>If the context is editable, let <var>event target</var> be the element that contains the start of the selection in document order, or <code class="external"><a href="http://www.w3.org/TR/html5/dom.html#the-body-element-0">the BODY element</a></code> if there is no selection or cursor. If the context is not editable, let <var>event target</var> be the focused node, or <code class="external"><a href="http://www.w3.org/TR/html5/dom.html#the-body-element-0">the BODY element</a></code> if no node has focus.</li>











<li>
	<dl class="switch">
		<dt>If the event type is paste</dt>
		<dd>
			<p>Set the associated <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-datatransfer-interface">DataTransfer</a></code> object's <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#drag-data-store-mode">drag data store mode</a></var> flag to <em>read-only</em></p>
			<!-- tests: setData() does not modify text that is about to be inserted in a paste event ++ below  -->
			<p>For each part on the OS clipboard, carry out these steps:</p>
			<dl class="switch">
				<dt>If the current clipboard part contains plain text:</dt>
				<dd>
					<ol>
						<li>Ensure the text is in the encoding the scripting engine uses internally</li>
						<li>Add one entry for the text to the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> with <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-kind">drag data item kind</a></var> set to <em>string</em> and <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-type-string">drag data item type string</a></var> set to <em>text/plain</em></li>



					</ol>
				</dd>
				<!-- CF_HDROP -->
				<dt>If the current clipboard part represents file references:</dt>
				<dd>
					<ol>
						<li>Determine MIME type of referenced files</li>
						<li>
							Add one entry per file reference to the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> with <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-kind">drag data item kind</a></var> set to <em>file</em> and <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-type-string">drag data item type string</a></var> set to the corresponding MIME type



							<p class="issue">What if the MIME type is unknown? Use application/octet-stream?</p></li>
					</ol>
				</dd>
				<dt>If the current clipboard part contains HTML- or XHTML-formatted text, according to the operating system's convention for describing such clipboard formats </dt>
				<dd id="processing-model-for-html-data">
					<p>If the implementation supports pasting HTML, the implementation <em>must</em> process the markup according to the following steps:</p>
					<ol>
						<li>Add one entry to the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> with <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-kind">drag data item kind</a></var> set to <em>Plain Unicode string</em>, <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-type-string">drag data item type string</a></var> set to <em>text/html</em> or <em>application/xhtml+xml</em> accordingly. Let <var>mainPartIndex</var> be the index of this entry in the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>.</li>
						<li>Extract the markup from the clipboard and use the relevant parser to construct a DOM tree</li>
						<li>If the markup's source URL is known, resolve all relative URLs in HREF and SRC attributes using the source URL as base URL, and set the respective attributes to the resolved absolute URL</li>
						<li>If the markup's source URL is known, and the origin differs from the origin of the document the paste event will fire on, the user agent <em>may</em> apply a <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#cross-origin-html-paste">cross-origin HTML paste sanitization algorithm</a></li>
						<li>If the markup's origin is from a local application, check whether there are references to local files and/or other parts of the OS clipboard's contents. If such references are found, references to sub-parts <em>must</em> be replaced by content-id references using the cid: URL scheme [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-RFC2392" rel="biblioentry">RFC2392</a></cite>]. To do so, process each attribute referencing a local file or clipboard part according to the following steps:
							<ol>
								<li>Let <var>itemNumber</var> be the number of items on the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code></li>
								<li><p>Choose the appropriate steps from this list:</p>
									<dl class="switch">
										<dt>If the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> of the current <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-datatransfer-interface">DataTransfer</a></code> object already contains an entry for the referenced file or clipboard part</dt>
										<dd>set <var>itemNumber</var> to the index of the existing entry</dd>
										<dt>Otherwise</dt>
										<dd>
											<ol>
												<li>Add a new entry to the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> with <code>index</code> set to <var>itemNumber</var>, <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-kind">drag data item kind</a></var> set to "file", and <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-type-string">drag data item type string</a></var> set to the MIME type of the file or clipboard part if known. <p class="issue">If unknown..? Should we simply ignore embeds with file types we don't "know"?</p></li>
												<li>Let the new entry's internal <i>file name</i> be the file name part of the HTML attribute contents</li>
												<li>Let the new entry's <i>last modified date</i> be the timestamp of the referenced file or 0 if the entry references a clipboard part</li>
											</ol></dd>
									</dl>
								</li>
								<li>Update the DOM attribute that referenced the local file or clipboard part to contain the string 'cid:' followed by <var>itemNumber</var>.</li>
							</ol>
						</li>
						<li>Serialize the processed DOM and update the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> entry referenced by <var>mainPartIndex</var> with the resulting HTML code</li>
					</ol>
				</dd>
				<dt>If the current clipboard part contains data in <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#mandatory-data-types">another supported binary or text-based format</a>:</dt>
				<dd>
					<ol>
						<li>Determine the MIME type of the data
						</li>
						<li>Add one entry to the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> with <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-kind">drag data item kind</a></var> set to <em>file</em>, <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-type-string">drag data item type string</a></var> set to the corresponding MIME type</li>
					</ol>
				</dd>
				<dt>Otherwise</dt>
				<dd>Do nothing</dd>
			</dl>
		<p>Update the <code>files</code> property to match entries in the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>.</p>
		<p>Update the <code>types</code> property to match entries in the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>.</p>
		</dd>
		<dt>Copy / cut event</dt>
		<dd>
			<p>Set the associated <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-datatransfer-interface">DataTransfer</a></code> object's <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#drag-data-store-mode">drag data store mode</a></var> flag to <em>read/write</em></p>
		</dd>
	</dl>
</li>
<li>
	<p>Fire the event [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-DOM-LEVEL-2-EVENTS" rel="biblioentry">DOM-LEVEL-2-EVENTS</a></cite>]. Implementation requirements for access to data during event dispatch are defined in [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-HTML5-DND" rel="biblioentry">HTML5-DND</a></cite>]. Some additional clipboard event-specific processing rules are given below:</p>
	<dl class="switch">
		<dt>If script calls <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransfer-cleardata">clearData()</a></code> or <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransferitems-clear">items.clear()</a></code> and the <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-datatransfer-interface">DataTransfer</a></code> object's <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#drag-data-store-mode">drag data store mode</a></var> flag is <em>read/write</em></dt>
		<dd>set the <var>clear-was-called</var> flag to true. If an argument is given, add the argument to the <var>types-to-clear</var> list.</dd>
		<dt>If script calls <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransfer-setdata">setData()</a></code> or modifies items and the <var>clear-was-called</var> flag is true</dt>
		<dd>
			<dl class="switch">
				<dt>If the <var>types-to-clear</var> list is empty</dt>
				<dd>set the <var>clear-was-called</var> flag to false</dd>
				<dt>else, if <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransfer-setdata">setData()</a></code>'s <code>type</code> argument or the new item's <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-drag-data-item-type-string">drag data item type string</a></var> is found in the <var>types-to-clear</var> list</dt>
				<dd>remove it from the list. If the list is now empty, set the <var>clear-was-called</var> flag to false</dd>
			</dl>
		</dd>


		<dt>If script calls <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#dom-datatransfer-getdata">getData()</a></code> or accesses items in the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> and <var>clipboard-entry</var> is set</dt>
		<dd>check that the clipboard data's sequence number matches <var>clipboard-entry</var>. If the clipboard no longer contains the same entry, set the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> object's <var class="external"><a href="http://www.w3.org/TR/html5/dnd.html#drag-data-store-mode">drag data store mode</a></var> to the <i>disabled mode</i></dd>
	</dl>
		<p class="warning">Warning: A malicious script listening to a paste event may set up a never-ending loop in order to read what the user places on the clipboard in the future. On platforms where a clipboard sequence number is not available, other limitations should be implemented.</p>

</li>
<li><p>Process the default action or the data from the script per the following instructions:</p>
	<dl class="switch">
		<dt>Paste event</dt>
		<dd>
			<dl class="switch">
				<dt>If the event was cancelled</dt>
				<dd>Do nothing, terminate this algorithm.
				</dd>
				<dt>Otherwise</dt>
				<dd>If the cursor or selection is in an editable context, insert the data from the clipboard and queue tasks to fire any events that should fire due to the modification, see <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#integration-with-other-scripts-and-events">interaction with other events</a> for details
				</dd>
			</dl>
		</dd>
		<dt>Copy / cut event</dt>
		<dd>
			<dl class="switch">
				<dt>If the event was cancelled</dt>
				<dd>
					<p>Update the clipboard contents with the data from the script, as given by the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>. Process each part as follows:</p>
					<dl class="switch">
						<dt>If the list of items is empty and the <var>clear-was-called</var> flag is <i>true</i></dt>
						<dd>
							<dl class="switch">
								<dt>If the <var>types-to-clear</var> list is empty
								</dt><dd>Clear the clipboard</dd>
								<dt>else</dt>
								<dd>Remove types in the <var>types-to-clear</var> list from the clipboard in an operating system and implementation-specific way</dd>
							</dl>
						</dd>
						<dt>If data type is <i>text/plain</i></dt>
						<dd>
							<ol>
								<li>Ensure encoding is correct per OS and locale conventions</li>
								<li>Normalize line endings according to platform conventions</li>
								<li>Place text on clipboard</li>
							</ol>
						</dd>
						<dt>Otherwise</dt>
						<dd><p>Place part on clipboard with the appropriate OS clipboard format description</p>
						<p class="note">Note: Due to limitations in the implementation of operating system clipboards, scripts should not assume that custom formats will be available to other applications on the system. For example, there is a limit to how many custom clipboard formats can be registered in Microsoft Windows. While it is possible to use any string for setData()'s type argument, sticking to <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#mandatory-data-types">well-known types</a> is strongly recommended.</p>
						</dd>
					</dl>
				</dd>
				<dt>Otherwise</dt>
				<dd>
					<dl class="switch">
						<dt>If there is a selection</dt>
						<dd>Place contents of selection on the clipboard</dd>
						<dd>If the event was a <em>cut</em> event and the context is editable, remove selection contents and collapse the selection</dd>
						<dt>Otherwise</dt>
						<dd>
							<p>Do nothing, terminate this algorithm</p>
 							<p class="note">Calling setData() without calling preventDefault() has no effect, even if there is no selection - the default action is to do nothing.</p>
						</dd>
					</dl>
				</dd>
			</dl>
</dd>
	</dl>
</li>
</ol>
</div>

<div class="section" id="clipboard-event-interfaces">
<!--OddPage--><h2><span class="secno">6. </span><a>Clipboard event</a> interfaces</h2>
<p>The ClipboardEvent interface extends the Event interface [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-DOM-LEVEL-2-EVENTS" rel="biblioentry">DOM-LEVEL-2-EVENTS</a></cite>].</p>
<p>The interface can be used to construct event objects per [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-DOM-CORE-DRAFT" rel="biblioentry">DOM-CORE-DRAFT</a></cite>]. An example is given below:</p>
<pre class="example javascript">var pasteEvent = new ClipboardEvent('paste', { bubbles: true, cancelable: true, dataType: 'text/plain', data: 'My string' } );
document.dispatchEvent(pasteEvent);</pre>
<p class="issue">There should be a way a script can check if a clipboard format is registered and whether the implementation allows writing this format to the clipboard! event.clipboardData.isTypeSupported('mime/type')? 
"Supported" means: if you give me data labelled as this type, I know the OS description and (if applicable) the relevant meta data and formatting for this type, and can write it to the clipboard so that other native apps can make use of it. If data labelled with the OS's native name or constant for this type is on the clipboard, I can map it to the mime type and extract the data in a way the script can use. Additionally, if a blob of data in this format is dropped on my window, I'll know what to do about it, and if you drag this data *from* my window to another application on the system, I can format and label it in a way the targe app will understand."
</p>



<p>A synthetic paste event <em>must not</em> give a script access to data on the real system clipboard. Synthetic cut and copy events <em>must not</em> modify data on the system clipboard.</p>

<p>Synthetic paste events do not have any default action. Even if such an event is dispatched in an editable context, the implementation <em>must not</em> insert any data.</p>





<pre class="idl"><span class="idlDictionary" id="idl-def-ClipboardEventInit">dictionary <span class="idlDictionaryID">ClipboardEventInit</span> : <span class="idlSuperclass"><a>EventInit</a></span> {
<span class="idlMember">    <span class="idlMemberType"><a>attribute DOMString</a></span> <span class="idlMemberName"><a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#widl-ClipboardEventInit-data">data</a></span>;</span>
<span class="idlMember">    <span class="idlMemberType"><a>attribute DOMString</a></span> <span class="idlMemberName"><a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#widl-ClipboardEventInit-dataType">dataType</a></span>;</span>
};</span>
</pre><div class="section" id="dictionary-clipboardeventinit-members"><h3><span class="secno">6.1 </span>Dictionary <a class="idlType" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#idl-def-ClipboardEventInit"><code>ClipboardEventInit</code></a> Members</h3><dl class="dictionary-members"><dt id="widl-ClipboardEventInit-data"><code>data</code> of type <span class="idlMemberType"><a>attribute DOMString</a></span></dt><dd>The data of the synthetic clipboard event</dd><dt id="widl-ClipboardEventInit-dataType"><code>dataType</code> of type <span class="idlMemberType"><a>attribute DOMString</a></span></dt><dd>A MIME type [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-RFC2046" rel="biblioentry">RFC2046</a></cite>] describing the data the event is being initialized with</dd></dl></div>

<pre class="idl"><span class="idlInterface" id="idl-def-ClipboardEvent">[<span class="extAttr">Constructor(DOMString type, optional ClipboardEventInit eventInitDict)</span>]
interface <span class="idlInterfaceID">ClipboardEvent</span> : <span class="idlSuperclass"><a>Event</a></span> {
<span class="idlAttribute">    readonly attribute <span class="idlAttrType"><a>DataTransfer</a></span> <span class="idlAttrName"><a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#widl-ClipboardEvent-clipboardData">clipboardData</a></span>;</span>
};</span>
</pre><div class="section" id="attributes"><h3><span class="secno">6.2 </span>Attributes</h3><dl class="attributes"><dt id="widl-ClipboardEvent-clipboardData"><code>clipboardData</code> of type <span class="idlAttrType"><a>DataTransfer</a></span>, readonly</dt><dd>
     <p>The clipboardData attribute is an instance of the <code class="external"><a href="http://www.w3.org/TR/html5/dnd.html#the-datatransfer-interface">DataTransfer</a></code> interface which lets a script read and manipulate values on the system clipboard during user-initiated copy, cut and paste operations. The associated drag data store is a live but filtered view of the system clipboard, exposing <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#mandatory-data-types">data types</a> the implementation knows the script can safely access.</p>
			<p>The clipboardData object's <var>items</var> and <var>files</var> properties enable processing of multi-part or non-textual data from the clipboard.</p>
    </dd></dl></div>

</div>

<div class="section" id="integration-with-other-scripts-and-events">
<!--OddPage--><h2><span class="secno">7. </span>Integration with other scripts and events</h2>
<h3 id="integration-with-rich-text-editing-apis">Integration with rich text editing APIs</h3>
<p>If an implementation supports the document.execCommand method and allows calling it with the commands "cut", "copy" and "paste", the implementation <em>must</em> fire the corresponding events. The event is syncronous and may prevent the execCommand() call from having its normal effect.</p>





<h3 id="otherevents">Interaction with other events</h3>
<p>If the clipboard operation is triggered by keyboard input, the implementation <em>must</em> fire the corresponding event as the default action of the <b>keydown</b> event that initiates the clipboard operation. For example, if the user presses <kbd>Ctrl-C</kbd> to copy, dispatching a copy event <em>must</em> be the default action of the C key's keydown event. The event is asynchronous but <em>must</em> be dispatched before <b>keyup</b> events for the relevant keys.</p>






<p>The default action of the cut and paste events <em>may</em> cause the implementation to dispatch other supported events, such as textInput, input, change, validation events, DOMCharacterDataModified and DOMNodeRemoved / DOMNodeInserted. Any such events are queued up to fire after processing of the cut/paste event is finished.</p>




<p>The implementation <em>must not</em> dispatch other input-related events like textInput, input, change, and validation events in response to the copy operation. </p>


<h3 id="selection-mod">Event listeners that modify selection or focus</h3>
<p>If the event listener modifies the selection or focus, the clipboard action <em>must</em> be completed on the modified selection.</p>



</div>

<div class="section" id="pasting-html-and-multi-part-data">
<!--OddPage--><h2 id="pasting-html"><span class="secno">8. </span>Pasting HTML and multi-part data</h2>
<div class="section" id="security-risks">
<h3><span class="secno">8.1 </span>Security risks</h3>
<p><i>This section is informative.</i></p>
<p>There are certain security risks associated with pasting formatted or multi-part data.</p>
<ul>
  <li>The user might paste hidden data without realising is there. This may happen if, for example, the markup includes &lt;input type="hidden"&gt; tags or HTML comments. Such hidden data might contain sensitive information.</li>
  <li>The user might paste malicious JavaScript into a trusted page.</li>
  <li>The implementation might grant scripts access to local files the user did not intend to expose.</li>
</ul>
<p>To determine what policies to use, the factors we consider are </p>
<ul>
  <li>The origin of the data being pasted</li>
  <li>The origin of data sub-parts such as referenced images</li>
  <li>The origin of the running script</li>
</ul>
<p>This is an overview of the scenarios and the possible security policies:</p>
<table class="simple" summary="security policies">
  <tbody><tr><th>Origin of data</th><th>Origin of script</th><th>Rules</th></tr>
  <tr><td rowspan="2">Originates from online source</td><td>Same as data</td><td>Do not sanitize HTML. Do not access any local files.</td></tr>
  <tr><td>Different origin</td><td>Sanitize content. Do not access any local files.</td></tr>
  <tr><td>Originates from local application</td><td>Any</td><td>Do not sanitize HTML. Grant access to local files</td></tr>
</tbody></table>
</div>
<div class="section" id="general-security-policies">
<h3><span class="secno">8.2 </span>General security policies</h3>
<p>The implementation <em>must not</em> download referenced online resources, or expose their contents in the <code>FileList</code> or <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code>.</p>
<p>If the data on the clipboard is not from a local application, the implementation <em>must not</em> give access to any referenced local files. For example, if the data contains &lt;img src="file://localhost/example.jpg"&gt; but the data's origin is an online resource, the implementation must not add an entry for example.jpg to the clipboardData.items list.</p>
<p>If the data originates from a web site, and the origin of the web site and the origin of the document associated with the script that created the event listener differs, the implementation <em>may</em> apply a <a href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#cross-origin-html-paste">sanitization algorithm</a> before exposing HTML data.</p>
</div>
<div class="section" id="cross-origin-html-paste-sanitization-algorithm">
<h3 id="cross-origin-html-paste"><span class="secno">8.3 </span>Cross-origin HTML paste sanitization algorithm</h3>
<p><em>This section is informative</em></p>
<p>Pasting HTML and other markup-based content copied from one site into another site might compromise the security of the former site, for example by giving the second site access to passwords, nonces and other sensitive data that might be embedded in the markup. Implementations <em>may</em> therefore decide to use a cross-origin paste sanitization algorithm to attempt removing hidden data the user is likely not aware of pasting. One example of such an algorithm might be the following:</p>
<ol>
	<li>Remove all of the following elements: SCRIPT, APPLET, OBJECT, INPUT with type set to "hidden", EMBED and KEYGEN. For all mentioned elements, also remove any child nodes.</li>
	<li>Remove the value attribute from any INPUT tag with type set to "password"</li>
  <li>Remove any elements whose computed style's display property is 'none'</li>
  <li>Remove any elements whose computed style's visibility property is 'hidden'</li>
	<li>Remove all data- attributes from all elements</li>
  <li>Remove comment nodes</li>
</ol>
<p>In order to protect the target site from script injection, the implementation <em>may</em> process the markup to remove scripting languages. One example of such an algorithm might be the following:</p>
<ol>
 	<li>Remove all event handler attributes from all elements</li>
 	<li>Remove all javascript: URLs from link HREF attributes, changing the HREF to an empty string instead</li>
  <li>If the implementation supports embedding javascript: URLs or other forms of scripting inside CSS instructions, such scripts must be removed.</li>
</ol>
<p>Implementations <em>may</em> let the user indicate that an app is trusted to not attack other apps and apply its own safety measures, thus bypass the above algorithm. Implementations <em>may</em> also implement additional restrictions, for example only support text/plain if the user does a cross-origin paste, or only support text/plain if content from an encrypted origin is pasted into a non-encrypted page.</p>
</div>
</div>


<div class="section" id="other-security-and-privacy-considerations">
<!--OddPage--><h2 id="security"><span class="secno">9. </span>Other security and privacy considerations</h2>
<p>Enabling authors to change what is copied by a user, or to make an automated copy of something that was never selected and allowing unrestricted calls to paste information can raise various security and privacy concerns.</p>

<p>An example scenario of a problem is where a user selects a link and copies it, but a different link is copied to the clipboard. The effect of this can range from an unexpected result on pasting to an attempted "phishing" attack.</p>

<h3 id="privacy">Privacy concerns</h3>
<p>Untrusted scripts should not get uncontrolled access to a user's clipboard data. This specification assumes that granting access to the current clipboard data when a user explicitly initiates a paste operation from the UA's trusted chrome is acceptable. However, implementors must proceed carefully, and as a minimum implement the precautions below:</p>
<ul>
<li>Objects implementing the DataTransfer interface to return clipboard data <em>must not</em> be available outside the ClipboardEvent event handler.</li>
<li>If a script stores a reference to an object implementing the DataTransfer interface to use from outside the ClipboardEvent event handler, all methods <em>must</em> be no-ops when called outside the expected context.



</li>
<li>Implementations <em>must not</em> let scripts create synthetic clipboard events to get access to real clipboard data.</li>
</ul>
<p>Implementations may choose to further limit the functionality provided by the DataTransfer interface. For example, an implementation may allow the user to disable this API, or configure which web sites should be granted access to it.</p>
<h3 id="nuisances">Nuisance considerations</h3>
<p>Scripts may use the DataTransfer API to annoy and confuse users by altering the data on the system clipboard from copy and cut events. This specification does not attempt to prevent such nuisances, though implementations may add additional restrictions.</p>
<p>Implementations must handle scripts that try to place excessive amounts of data on the clipboard gracefully.</p>
</div>
<div class="section" id="mandatory-data-types-1">
<!--OddPage--><h2 id="mandatory-data-types"><span class="secno">10. </span>Mandatory data types</h2>
<p>The implementation must recognise the native OS clipboard format description for the following data types, to be able to populate the <code class="external"><a href="http://dev.w3.org/html5/spec/Overview.html#datatransferitemlist">DataTransferItemList</a></code> with the correct description for paste events, and set the correct data format on the OS clipboard in response to copy and cut events.</p>
<ul>
<li>text/plain</li>
<li>text/uri-list</li>
<li>text/csv</li>
<li>text/css</li>
<li>text/html</li>
<li>application/xhtml+xml</li>
<li>image/png</li>
<li>image/jpg</li>
<li>image/gif</li>
<li>image/svg+xml</li>
<li>application/xml, text/xml</li>
<li>application/javascript</li>
<li>application/json</li>
<li></li>
</ul>
<p class="issue">What about audio and video types? BMP?
RTF? RTF was requested due to embedded images possibility (but this spec allows access to local images referenced in HTML fragments by design..).
</p>

<pre class="issue">Some standard Windows formats we don't handle

DataFormats.CF_RTFTEXT 

DataFormats.CF_WAVE 
DataFormats.CF_RIFF 

DataFormats.CF_BITMAP 
DataFormats.CF_DIB 
DataFormats.CF_DIF 
DataFormats.CF_METAFILEPICT 
DataFormats.CF_PALETTE 
DataFormats.CF_TIFF 

</pre>

</div>

<h2 id="Acknowledg">Acknowledgements</h2>

<p>This section is informative</p>

<p>The editors would like to acknowledge their intellectual debt to the
documentation of Data Transfer functionalities from Microsoft [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-MICROSOFT-CLIP-OP" rel="biblioentry">MICROSOFT-CLIP-OP</a></cite>] and earlier drafts of the [<cite><a class="bibref" href="http://www.w3.org/TR/2012/WD-clipboard-apis-20120223/#bib-HTML5" rel="biblioentry">HTML5</a></cite>] specification.  We are also grateful for the draft "safe copy and paste" from Paul Libbrecht (this draft is no longer available on the Web).</p>

<p>We would like to acknowledge the contributions made by the following:</p>

<p>Shawn Carnell, Daniel Dardailler, Al Gilman, Lachlan Hunt, Aaron
Leventhal, Jim Ley, Paul Libbrecht, "Martijn", Dave Poehlman, "ROBO Design",
Janina Sajka, Rich Schwerdtfeger, Jonas Sicking, Maciej Stachowiak, Mihai
Sucan, Tom Wlodkowski, Anne van Kesteren, Tarquin Wilton-Jones, Dmitry Titov, 
Robert O'Callahan, Ryosuke Niwa, Ian Hickson, Ojan Vafai, Daniel Cheng, Adam Barth, ms2ger.</p>

<!--  Here follow some more quirky tests that don't directly correspond to any of the requirements in the spec itself.. -->











 













<div class="appendix section" id="references"><!--OddPage--><h2><span class="secno">A. </span>References</h2><div class="section" id="normative-references"><h3><span class="secno">A.1 </span>Normative references</h3><dl class="bibliography"><dt id="bib-DOM-CORE-DRAFT">[DOM-CORE-DRAFT]</dt><dd>Anne van Kesteren, Aryeh Gregor, Ms2ger. <a href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html"><cite>DOM Core</cite></a>  6 February 2012. W3C Editor's Draft. (Work in progress.) URL: <a href="http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html">http://dvcs.w3.org/hg/domcore/raw-file/tip/Overview.html</a> 
</dd><dt id="bib-DOM-LEVEL-2-EVENTS">[DOM-LEVEL-2-EVENTS]</dt><dd>Tom Pixley. <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113"><cite>Document Object Model (DOM) Level 2 Events Specification.</cite></a> 13 November 2000. W3C Recommendation. URL: <a href="http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113">http://www.w3.org/TR/2000/REC-DOM-Level-2-Events-20001113</a> 
</dd><dt id="bib-HTML5-DND">[HTML5-DND]</dt><dd>Ian Hickson; David Hyatt. <a href="http://www.w3.org/TR/html5/dnd.html"><cite>HTML5 chapter 7: Drag and drop.</cite></a>  25 May 2011. W3C Working Draft. (Work in progress.) URL: <a href="http://www.w3.org/TR/html5/dnd.html">http://www.w3.org/TR/html5/dnd.html</a> 
</dd><dt id="bib-RFC2046">[RFC2046]</dt><dd>N. Freed; N. Borenstein. <a href="http://www.ietf.org/rfc/rfc2046.txt"><cite>Multipurpose Internet Mail Extensions (MIME) Part Two: Media Types.</cite></a> November 1996. Internet RFC 2046. URL: <a href="http://www.ietf.org/rfc/rfc2046.txt">http://www.ietf.org/rfc/rfc2046.txt</a> 
</dd><dt id="bib-RFC2119">[RFC2119]</dt><dd>S. Bradner. <a href="http://www.ietf.org/rfc/rfc2119.txt"><cite>Key words for use in RFCs to Indicate Requirement Levels.</cite></a> March 1997. Internet RFC 2119.  URL: <a href="http://www.ietf.org/rfc/rfc2119.txt">http://www.ietf.org/rfc/rfc2119.txt</a> 
</dd><dt id="bib-RFC2392">[RFC2392]</dt><dd>E. Levinson. <a href="http://www.ietf.org/rfc/rfc2392.txt"><cite>Content-ID and Message-ID Uniform Resource Locators.</cite></a> August 1998. Internet RFC 2392. URL: <a href="http://www.ietf.org/rfc/rfc2392.txt">http://www.ietf.org/rfc/rfc2392.txt</a> 
</dd></dl></div><div class="section" id="informative-references"><h3><span class="secno">A.2 </span>Informative references</h3><dl class="bibliography"><dt id="bib-HTML5">[HTML5]</dt><dd>Ian Hickson; David Hyatt. <a href="http://www.w3.org/TR/html5"><cite>HTML5.</cite></a> 25 May 2011. W3C Working Draft. (Work in progress.) URL: <a href="http://www.w3.org/TR/html5">http://www.w3.org/TR/html5</a> 
</dd><dt id="bib-MICROSOFT-CLIP-OP">[MICROSOFT-CLIP-OP]</dt><dd>Microsoft Developer Network. <a href="http://msdn.microsoft.com/en-us/library/ms537658.aspx"><cite>About DHTML Data Transfer.</cite></a>  URL: <a href="http://msdn.microsoft.com/en-us/library/ms537658.aspx">http://msdn.microsoft.com/en-us/library/ms537658.aspx</a> 
</dd></dl></div></div>
</body></html>